- name: Deploy MySQL Replica and Update Docker Compose on Debian
  hosts: praktikum
  become: yes
  vars:
    compose_dir: "/opt/wordpress"
    compose_file: "{{ compose_dir }}/docker-compose.yml"
    mysql_volume: "mysql_data"
    wordpress_volume: "wordpress_data"
    mysql_replica_volume: "mysql_replica_data"
    mysql_root_password: "secure_root_password"
    wordpress_db_password: "secure_wp_password"
    replication_user: "replicator"
    replication_password: "secure_repl_password"
    venv_path: "/opt/myenv"

  tasks:
    - name: Ensure compose directory has correct permissions
      file:
        path: "{{ compose_dir }}"
        state: directory
        mode: '0755'

    - name: Stop existing Docker Compose services
      community.docker.docker_compose_v2:
        project_src: "{{ compose_dir }}"
        files: "{{ compose_file | basename }}"
        state: absent
        services:
          - wordpress

    - name: Check MySQL container status
      command: docker compose -f {{ compose_file }} ps -q mysql
      args:
        chdir: "{{ compose_dir }}"
      register: mysql_status
      failed_when: mysql_status.stdout == ""

    - name: Backup current MySQL data
      shell: docker compose -f {{ compose_file }} exec -T mysql mysqldump -u root -p{{ mysql_root_password }} --all-databases > {{ compose_dir }}/backup.sql
      args:
        chdir: "{{ compose_dir }}"

    - name: Update Docker Compose file with replica
      template:
        src: docker-compose.yml.j2
        dest: "{{ compose_file }}"
        mode: '0644'

    - name: Start Docker Compose services
      community.docker.docker_compose_v2:
        project_src: "{{ compose_dir }}"
        files: "{{ compose_file | basename }}"
        state: present
        wait: true
        services:
          - mysql_replica

    - name: Setup replication user on master
      command: docker compose -f {{ compose_file }} exec -T mysql mysql -u root -p{{ mysql_root_password }} -e "CREATE USER IF NOT EXISTS'{{ replication_user }}'@'%' IDENTIFIED WITH mysql_native_password BY '{{ replication_password }}'; GRANT REPLICATION SLAVE ON *.* TO '{{ replication_user }}'@'%'; FLUSH PRIVILEGES;"
      args:
        chdir: "{{ compose_dir }}"

    - name: Get master status
      command: docker compose -f {{ compose_file }} exec -T mysql mysql -u root -p{{ mysql_root_password }} -e "SHOW MASTER STATUS;"
      args:
        chdir: "{{ compose_dir }}"
      register: master_status

    - name: Debug raw master status output
      debug:
        msg: "Raw SHOW MASTER STATUS output: {{ master_status.stdout.split('\n')[1].split('\t') }}"

    - name: Extract master log file and position
      set_fact:
        master_log_file: "{{ master_status.stdout.split('\n')[1].split('\t')[0] }}"
        master_log_pos: "{{ master_status.stdout.split('\n')[1].split('\t')[1] }}"

    - name: Debug master log file and position
      debug:
        msg: "Master Log File: {{ master_log_file }}, Master Log Position: {{ master_log_pos }}"
      when: master_log_file and master_log_pos

    - name: Fail if master log file or position is not defined
      fail:
        msg: "Failed to extract master log file or position. master_log_file: {{ master_log_file | default('undefined') }}, master_log_pos: {{ master_log_pos | default('undefined') }}"
      when: not master_log_file or not master_log_pos

    - name: Install required system packages
      ansible.builtin.package:
        name:
          - python3-venv
          - python3-pip
          - default-libmysqlclient-dev
          - build-essential
        state: present

    - name: Create virtual environment
      ansible.builtin.command: python3 -m venv {{ venv_path }}
      args:
        creates: "{{ venv_path }}/bin/activate"

    - name: Install PyMySQL in virtualenv
      ansible.builtin.pip:
        name: 
          - PyMySQL
          - cryptography
        virtualenv: "{{ venv_path }}"
        virtualenv_python: python3

    - name: Set fact for using virtualenv Python
      ansible.builtin.set_fact:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Stop replica
      community.mysql.mysql_replication:
        mode: stopreplica
        login_host: 127.0.0.1
        login_port: 3307
        login_user: root
        login_password: "{{mysql_root_password}}"

    - name: Configure replica
      command: >
        docker compose -f {{ compose_file }} exec -T mysql_replica mysql -u root -p{{ mysql_root_password }} -e
        "CHANGE MASTER TO MASTER_HOST='mysql', MASTER_USER='{{ replication_user }}', MASTER_PASSWORD='{{ replication_password }}',
        MASTER_LOG_FILE='{{ master_log_file }}', MASTER_LOG_POS={{ master_log_pos }}; START SLAVE;"
      args:
        chdir: "{{ compose_dir }}"

    - name: Copy backup to replica container
      command: docker compose -f {{ compose_file }} cp {{ compose_dir }}/backup.sql mysql_replica:/backup.sql
      args:
        chdir: "{{ compose_dir }}"

    - name: Restore backup to replica
      command: docker compose -f {{ compose_file }} exec -T mysql_replica mysql -u root -p{{ mysql_root_password }} -e "source /backup.sql;"
      args:
        chdir: "{{ compose_dir }}"

    - name: Start replica
      community.mysql.mysql_replication:
        mode: startreplica
        login_host: 127.0.0.1
        login_port: 3307
        login_user: root
        login_password: "{{mysql_root_password}}"
        
    - name: Start wordpress
      community.docker.docker_compose_v2:
        project_src: "{{ compose_dir }}"
        files: "{{ compose_file | basename }}"
        state: present
        services:
          - wordpress